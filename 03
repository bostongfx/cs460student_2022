<html>
  <head>
    <meta charset="UTF-8" />
    <style>
      html, body { 
        background-color:#000;
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden !important;  \
      }
    </style>
    <script src="https://threejs.org/build/three.min.js" type="text/javascript"></script>
    <script src="https://threejs.org/examples/js/controls/TrackballControls.js" type="text/javascript"></script>
    <script>


      function getRandomColor() {
        
        function getRandomRGB() {
				return Math.floor(Math.random()*256);
			}

				return {color: `rgb(${getRandomRGB()}, ${getRandomRGB()}, ${getRandomRGB()})`};
			}

      function getRandomGeometry() {
        function getRandomCase() {
        return Math.floor(Math.random() * 5)
        }

        switch(getRandomCase()) {
          case 0:
						return new THREE.RingGeometry(10, 40, 30);
						
					case 1:
						return new THREE.TorusKnotGeometry(20, 6, 48, 8);		
					case 2:
						return new THREE.SphereGeometry(30, 50, 80);
					case 3:
						return new THREE.OctahedronGeometry(40);
					case 4:
                                    return new THREE.ConeGeometry(30, 50);
					case 5:
						return new THREE.BoxGeometry(20 , 20, 20 );
        }
      }

      var global_counter = 0;
      window.onload = function() {

       

        scene = new THREE.Scene();

        fov = 75; /degrees corresponds to up and down that constitutes frustrum/
        ratio = window.innerWidth / window.innerHeight;
        zNear = 1;
        zFar = 10000;
        
        camera = new THREE.PerspectiveCamera(fov, ratio, zNear, zFar);
        camera.position.set( 0, 0, 500);
        renderer = new THREE.WebGLRenderer();
        renderer.setSize( window.innerWidth, window.innerHeight );
        document.body.appendChild(renderer.domElement );


        geometry = new THREE.PlaneGeometry( 10000, 10000 );
        

        material = new THREE.MeshBasicMaterial( {
          visible: false
        });
        invisible_plane = new THREE.Mesh( geometry, material);
        scene.add(invisible_plane);


        
        renderer.domElement.onmousemove = function( e ){
            if(!e.shiftKey) return false;

            pixel_coords = new THREE.Vector2( e.clientX, e.clientY);
            
            vp_coords = new THREE.Vector2( 
                        ( pixel_coords.x / window.innerWidth ) * 2 - 1,  
                        -( pixel_coords.y / window.innerHeight ) * 2 + 1) 
            

            vp_coords_near = new THREE.Vector3( vp_coords.x, vp_coords.y, 0);
            raycaster = new THREE.Raycaster();
            raycaster.setFromCamera(vp_coords_near, camera);
           
            intersects = raycaster.intersectObject(invisible_plane);
            p = intersects[0].point;
            
            geometry = getRandomGeometry();
            material = new THREE.MeshStandardMaterial(getRandomColor());
            cube = new THREE.Mesh( geometry, material);
            scene.add(cube);
            cube.position.set(p.x, p.y, p.z);
            global_counter++;
            console.log(global_counter);

          };

        ambientLight = new THREE.AmbientLight( 0x404040 );
        scene.add( ambientLight );

        light = new THREE.DirectionalLight( 0xC5614C, 5.0);
        light.position.set( 30, 120, 30 );
        scene.add(light);

   
        geometry = new THREE.BoxGeometry( 50, 50, 50);
        material = new THREE.MeshStandardMaterial(getRandomColor());
        cube = new THREE.Mesh( geometry, material);
        scene.add(cube);

 
        controls = new THREE.TrackballControls( camera, renderer.domElement );

        animate();

      };

      function animate() {

        requestAnimationFrame( animate );



        controls.update();


        renderer.render( scene, camera);

      };
    </script>
  </head>
  <body></body>
</html>
